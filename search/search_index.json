{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#bambu-printer-manager","title":"bambu-printer-manager","text":"<p><code>bambu-printer-manager</code> is an all in one pure python wrapper for interacting with and managing Bambu Labs printers.  </p>"},{"location":"#project-composition","title":"Project Composition","text":"Text Only<pre><code>bpm/  \n    bambucommands.py            # collection of constants representing Bambu Lab `mqtt` request commands \n    bambuconfig.py              # contains the `BambuConfig` class used for storing configuration data\n    bambulogger.py              # internal class used for logging\n    bambuprinterlogger.json     # internal configuration file for configuration of logging\n    bambuprinter.py             # the main `bambu-printer-manager` class `BambuPrinter` lives here\n    bambuspool.py               # contains the `BambuSpool` class used for storing spool data\n    bambutools.py               # contains a collection of methods used as tools (mostly internal)\n\n    ftpsclient/\n        _client.py              # internal class used for performing `FTPS` operations\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"Text Only<pre><code>Python 3.12.1+\n\n* mkdocstrings, webcolors and paho-mqtt install automatically as predefined dependencies\n</code></pre>"},{"location":"#installation","title":"Installation","text":"Text Only<pre><code>pip install bambu-printer-manager\n</code></pre>"},{"location":"#imports","title":"Imports","text":"Python<pre><code>from bpm.bambuconfig import BambuConfig\nfrom bpm.bambuprinter import BambuPrinter\nfrom bpm.bambutools import PrinterState\nfrom bpm.bambutools import parseStage\nfrom bpm.bambutools import parseFan\n</code></pre>"},{"location":"#constructors","title":"Constructor(s)","text":"<p>Python<pre><code>config = BambuConfig(hostname=\"{host name}\", access_code=\"{access code}\", serial_number=\"{serial #}\")\nprinter = BambuPrinter(config=config)\n</code></pre> or variations such as: Python<pre><code>config = BambuConfig()\nprinter = BambuPrinter()\n\nconfig.hostname = \"{host name}\"\nconfig.access_code = \"{access code}\"\nconfig.serial_number = \"{serial #}\"\n\nprinter.config = config\n</code></pre> or Python<pre><code>config = BambuConfig()\n\nconfig.hostname = \"{host name}\"\nconfig.access_code = \"{access code}\"\nconfig.serial_number = \"{serial #}\"\n\nprinter = BambuPrinter(config=config)\n</code></pre> or even Python<pre><code>printer = BambuPrinter(config=BambuConfig(hostname=\"{host name}\", access_code=\"{access code}\", serial_number=\"{serial #}\"))\n</code></pre></p>"},{"location":"license/","title":"License","text":"Text Only<pre><code>            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar &lt;sam@hocevar.net&gt;\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>bpm<ul> <li>bambucommands</li> <li>bambuconfig</li> <li>bambulogger</li> <li>bambuprinter</li> <li>bambuspool</li> <li>bambutools</li> <li>ftpsclient<ul> <li>_client</li> <li>_version</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bpm/bambucommands/","title":"bambucommands","text":""},{"location":"reference/bpm/bambuconfig/","title":"bambuconfig","text":""},{"location":"reference/bpm/bambulogger/","title":"bambulogger","text":""},{"location":"reference/bpm/bambuprinter/","title":"bambuprinter","text":""},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter","title":"<code>BambuPrinter</code>","text":"<p><code>BambuPrinter</code> is the main class within <code>bambu-printer-manager</code> for interacting with and managing your Bambu Lab 3d printer. It provides an object oriented abstraction layer  between your project and the <code>mqtt</code> and <code>ftps</code> based mechanisms in place for communicating with your printer.</p> Source code in <code>bpm/bambuprinter.py</code> Python<pre><code>class BambuPrinter:\n    \"\"\"\n    `BambuPrinter` is the main class within `bambu-printer-manager` for interacting with and\n    managing your Bambu Lab 3d printer. It provides an object oriented abstraction layer \n    between your project and the `mqtt` and `ftps` based mechanisms in place for communicating\n    with your printer.\n    \"\"\"\n    def __init__(self, config=BambuConfig()):\n        \"\"\"\n        Sets up all internal storage variables for `BambuPrinter` and bootstraps the\n        logging engine.\n\n        Parameters\n        ----------\n        config : BambuConfig\n\n        The private variables (where appropriate) are included whenever the class is serialized\n        using its `toJson()` method.\n        \"\"\"\n        setup_logging()\n\n        self._internalException = None\n        self._lastMessageTime = None\n        self._recent_update = False\n\n        self._config = config\n        self._state = PrinterState.NO_STATE\n\n        self._client = None\n        self._on_update = None\n\n        self._bed_temp = 0.0\n        self._bed_temp_target = 0.0\n        self._tool_temp = 0.0\n        self._tool_temp_target = 0.0\n        self._chamber_temp = 0.0\n        self._chamber_temp_target = 0.0\n\n        self._fan_gear = 0\n        self._heatbreak_fan_speed = 0\n        self._fan_speed = 0\n        self._fan_speed_target = 0\n\n        self._light_state = \"\"\n        self._wifi_signal = \"\"\n        self._speed_level = 0\n\n        self._gcode_state = \"\"\n        self._gcode_file = \"\"\n        self._print_type = \"\"\n        self._percent_complete = 0\n        self._time_remaining = 0\n        self._layer_count = 0\n        self._current_layer = 0\n\n        self._current_stage = 0\n        self._current_stage_text = \"\"\n\n        self._spools = ()\n        self._target_spool = 255\n        self._active_spool = 255\n        self._spool_state = \"\"\n        self._ams_status = None\n        self._ams_exists = False\n\n        self._sdcard_contents = None\n        self._sdcard_3mf_files = None\n\n    def start_session(self):\n        \"\"\"\n        Initiates a connection to the Bambu Lab printer and provides a stateful\n        session, with built-in recovery in the event `bambu-printer-manager` \n        becomes disconnected from the machine.\n\n        This method is required to be called before any commands or data \n        collection / callbacks can take place with the machine.\n        \"\"\"\n        logger.debug(\"session start_session\")\n        if self.config.hostname is None or self.config.access_code is None or self.config.serial_number is None:\n            raise Exception(\"hostname, access_code, and serial_number are required\")\n        if self.client and self.client.is_connected():\n            raise Exception(\"a session is already active\")\n\n        def on_connect(client, userdata, flags, rc):\n            logger.debug(\"session on_connect\")\n            if self.state != PrinterState.PAUSED:\n                self.state = PrinterState.CONNECTED\n                client.subscribe(f\"device/{self.config.serial_number}/report\")\n                logger.debug(f\"subscribed to [device/{self.config.serial_number}/report]\")\n        def on_disconnect(client, userdata, rc):\n            logger.debug(\"session on_disconnect\")\n            if self._internalException:\n                logger.exception(\"an internal exception occurred\")\n                self.state = PrinterState.QUIT\n                raise self._internalException\n            if self.state != PrinterState.PAUSED:\n                self.state = PrinterState.DISCONNECTED\n        def on_message(client, userdata, msg):\n            logger.debug(\"session on_message\", extra={\"state\": self.state.name})\n            if self._lastMessageTime and self._recent_update: self._lastMessageTime = time.time()\n            self._on_message(json.loads(msg.payload.decode(\"utf-8\")))\n        def loop_forever(printer):\n            logger.debug(\"session loop_forever\")\n            try:\n                printer.client.loop_forever(retry_first_connection=True)            \n            except Exception as e:\n                logger.exception(\"an internal exception occurred\")\n                printer._internalException = e\n                if printer.client and printer.client.is_connected(): printer.client.disconnect() \n            printer.state = PrinterState.QUIT\n\n        self.client = mqtt.Client()\n\n        self.client.on_connect = on_connect\n        self.client.on_disconnect = on_disconnect\n        self.client.on_message = on_message\n\n        self.client.tls_set(tls_version=ssl.PROTOCOL_TLS, cert_reqs=ssl.CERT_NONE)\n        self.client.tls_insecure_set(True)\n        self.client.reconnect_delay_set(min_delay=1, max_delay=1)\n\n        self.client.username_pw_set(self.config.mqtt_username, password=self.config.access_code)\n        self.client.user_data_set(self.config.mqtt_client_id)\n\n        try:\n            self.client.connect(self.config.hostname, self.config.mqtt_port, 60)\n        except Exception as e:\n            self._internalException = e\n            logger.warning(f\"unable to connect to printer - reason: {e}\", extra={\"exception\": traceback.format_exc()})\n            self.state = PrinterState.QUIT\n            return\n\n        threading.Thread(target=loop_forever, name=\"bambuprinter-session\", args=(self,)).start()\n\n        self._start_watchdog()\n\n    def pause_session(self):\n        \"\"\"\n        Pauses the `BambuPrinter` session is it is active.  Under the covers this\n        method unsubscribes from the `/report` topic, essentially disabling all\n        printer data refreshes\n        \"\"\"\n        if self.state != PrinterState.PAUSED:\n            self.client.unsubscribe(f\"device/{self.config.serial_number}/report\")\n            logger.debug(f\"unsubscribed from [device/{self.config.serial_number}/report]\")\n            self.state = PrinterState.PAUSED\n\n    def resume_session(self):\n        if self.client and self.client.is_connected() and self.state == PrinterState.PAUSED:\n            self.client.subscribe(f\"device/{self.config.serial_number}/report\")\n            logger.debug(f\"subscribed to [device/{self.config.serial_number}/report]\")\n            self._lastMessageTime = time.time()\n            self.state = PrinterState.CONNECTED\n            return\n        self.state = PrinterState.QUIT\n\n    def quit(self):\n        if self.client and self.client.is_connected():\n            self.client.disconnect()\n            while self.state != PrinterState.QUIT:\n                time.sleep(.1)\n            logger.debug(\"mqtt client was connected and is now disconnected\")\n        else:\n            self.state == PrinterState.QUIT\n            logger.debug(\"mqtt client was already disconnected\")\n\n    def refresh(self):\n        if self.state == PrinterState.CONNECTED:\n            self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(ANNOUNCE_PUSH))\n            logger.debug(f\"published ANNOUNCE_PUSH to [device/{self.config.serial_number}/request]\")\n            self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(ANNOUNCE_VERSION))\n            logger.debug(f\"published ANNOUNCE_VERSION to [device/{self.config.serial_number}/request]\")\n\n    def unload_filament(self):\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(UNLOAD_FILAMENT))\n        logger.debug(f\"published UNLOAD_FILAMENT to [device/{self.config.serial_number}/request]\")\n\n    def load_filament(self, slot: int):\n        msg = AMS_FILAMENT_CHANGE\n        msg[\"print\"][\"target\"] = int(slot)\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(msg))\n        logger.debug(f\"published AMS_FILAMENT_CHANGE to [device/{self.config.serial_number}/request]\", extra={\"target\": slot, \"bambu_msg\": msg})\n\n    def send_gcode(self, gcode: str):\n        cmd = SEND_GCODE_TEMPLATE\n        cmd[\"print\"][\"param\"] = f\"{gcode} \\n\"\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(cmd))\n        logger.debug(f\"published SEND_GCODE_TEMPLATE to [device/{self.config.serial_number}/request]\", extra={\"gcode\": gcode})\n\n    def print_3mf_file(self, name: str, bed: PlateType, ams: str, bedlevel: Optional[bool] = True, flow: Optional[bool] = True, timelapse: Optional[bool] = False):\n        file = PRINT_3MF_FILE\n        file[\"print\"][\"file\"] = f\"{name}.gcode.3mf\"\n        file[\"print\"][\"url\"] = f\"file:///sdcard/{name}.gcode.3mf\"\n        file[\"print\"][\"subtask_name\"] = name[name.rindex(\"/\") + 1::] if \"/\" in name else name\n        file[\"print\"][\"bed_type\"] = bed.name.lower()\n        if len(ams) &gt; 2:\n            file[\"print\"][\"use_ams\"] = True\n            file[\"print\"][\"ams_mapping\"] = json.loads(ams)\n        else:\n            file[\"print\"][\"use_ams\"] = False\n            file[\"print\"][\"ams_mapping\"] = \"\"\n        file[\"print\"][\"bed_leveling\"] = bedlevel\n        file[\"print\"][\"flow_cali\"] = flow\n        file[\"print\"][\"timelapse\"] = timelapse\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(file))\n        logger.debug(f\"published PRINT_3MF_FILE to [device/{self.config.serial_number}/request]\", extra={\"3mf_name\": name, \"bed\": bed, \"ams\": ams})\n\n    def stop_printing(self):\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(STOP_PRINT))\n        logger.debug(f\"published STOP_PRINT to [device/{self.config.serial_number}/request]\")\n\n    def pause_printing(self):\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(PAUSE_PRINT))\n        logger.debug(f\"published PAUSE_PRINT to [device/{self.config.serial_number}/request]\")\n\n    def resume_printing(self):\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(RESUME_PRINT))\n        logger.debug(f\"published RESUME_PRINT to [device/{self.config.serial_number}/request]\")\n\n    def get_sdcard_3mf_files(self):\n        def getDirFiles(ftps: IoTFTPSClient, directory: str) -&gt; {}:\n            try:\n                files = sorted(ftps.list_files_ex(directory))\n            except Exception as e:\n                return None\n\n            dir = {}\n\n            dir[\"id\"] = directory \n            dir[\"name\"] = directory\n\n            items = []\n\n            for file in files:\n                if file[0][:1] == \"d\":\n                    item = {}\n                    item = getDirFiles(ftps, directory + (\"/\" if directory != \"/\" else \"\") + file[1])\n                    if item.get(\"children\"): items.append(item)\n                else:\n                    if file[1].lower().endswith(\".gcode.3mf\"):\n                        item = {}\n                        item[\"id\"] = dir[\"id\"] + (\"/\" if dir[\"id\"] != \"/\" else \"\") + file[1]\n                        item[\"name\"] = file[1]\n                        items.append(item)\n\n            if len(items) &gt; 0: dir[\"children\"] = items\n            return dir\n\n        ftps = IoTFTPSClient(f\"bambu-a1-printer\", 990, \"bblp\", f\"42050576\", ssl_implicit=True)\n        fs = getDirFiles(ftps, \"/\")\n        logger.debug(\"read 3mf sdcard files\", extra={\"fs\": fs})\n        self._sdcard_3mf_files = fs\n        return fs\n\n\n    def get_sdcard_contents(self):\n        def getDirFiles(ftps: IoTFTPSClient, directory: str) -&gt; {}:\n            try:\n                files = sorted(ftps.list_files_ex(directory))\n            except Exception as e:\n                return None\n\n            dir = {}\n\n            dir[\"id\"] = directory \n            dir[\"name\"] = directory\n\n            items = []\n\n            for file in files:\n                item = {}\n                if file[0][:1] == \"d\":\n                    item = getDirFiles(ftps, directory + (\"/\" if directory != \"/\" else \"\") + file[1])\n                else:\n                    item[\"id\"] = dir[\"id\"] + (\"/\" if dir[\"id\"] != \"/\" else \"\") + file[1]\n                    item[\"name\"] = file[1]\n                items.append(item)\n\n            if len(items) &gt; 0: dir[\"children\"] = items\n            return dir\n\n        ftps = IoTFTPSClient(f\"bambu-a1-printer\", 990, \"bblp\", f\"42050576\", ssl_implicit=True)\n        fs = getDirFiles(ftps, \"/\")\n        logger.debug(\"read all sdcard files\", extra={\"fs\": fs})\n        self._sdcard_contents = fs\n        return fs\n\n    def toJson(self):\n        response = json.dumps(self, default=self.jsonSerializer, indent=4, sort_keys=True)\n        return json.loads(response)\n\n    def jsonSerializer(self, obj):\n        try:\n            if isinstance(obj, mqtt.Client):\n                return \"\"\n            if str(obj.__class__).replace(\"&lt;class '\", \"\").replace(\"'&gt;\", \"\") == \"mappingproxy\":\n                return \"bambutools.PrinterState\"\n            return obj.__dict__\n        except Exception as e:\n            logger.warn(\"unable to serialize object\", extra={\"obj\": obj})\n            return \"not available\"\n\n    def _start_watchdog(self): \n        def watchdog_thread(printer):\n            try:\n                while printer.state != PrinterState.QUIT:\n                    if printer.state == PrinterState.CONNECTED and (printer._lastMessageTime is None or printer._lastMessageTime + 15 &lt; time.time()):\n                        if printer._lastMessageTime: logger.warn(\"BambuPrinter watchdog timeout\")\n                        printer._lastMessageTime = time.time()\n                        printer._recent_update = False\n                        printer.client.publish(f\"device/{printer.config.serial_number}/request\", json.dumps(ANNOUNCE_PUSH))\n                        printer.client.publish(f\"device/{printer.config.serial_number}/request\", json.dumps(ANNOUNCE_VERSION))\n                    time.sleep(.1)\n            except Exception as e:\n                logger.exception(\"an internal exception occurred\")\n                printer._internalException = e\n                if printer.client and printer.client.is_connected(): printer.client.disconnect()\n\n        threading.Thread(target=watchdog_thread, name=\"bambuprinter-session-watchdog\", args=(self,)).start()\n\n    def _on_message(self, message: str):\n        logger.debug(\"_on_message\", extra={\"bambu_msg\": message})\n\n        if \"system\" in message:\n            system = message[\"system\"]\n\n        elif \"print\" in message:\n            status = message[\"print\"]\n\n            if \"bed_temper\" in status: self._bed_temp = float(status[\"bed_temper\"])\n            if \"bed_target_temper\" in status: self._bed_temp_target = float(status[\"bed_target_temper\"])\n            if \"nozzle_temper\" in status: self._tool_temp = float(status[\"nozzle_temper\"])\n            if \"nozzle_target_temper\" in status: self._tool_temp_target = float(status[\"nozzle_target_temper\"])\n\n            if \"fan_gear\" in status: self._fan_gear = int(status[\"fan_gear\"])\n            if \"heatbreak_fan_speed\" in status: self._heatbreak_fan_speed = int(status[\"heatbreak_fan_speed\"])\n            if \"cooling_fan_speed\" in status: self._fan_speed = parseFan(int(status[\"cooling_fan_speed\"]))\n\n            if \"wifi_signal\" in status: self._wifi_signal = status[\"wifi_signal\"] \n            if \"lights_report\" in status: self._light_state = (status[\"lights_report\"])[0][\"mode\"]\n            if \"spd_lvl\" in status: self._speed_level = status[\"spd_lvl\"]\n            if \"gcode_state\" in status: self._gcode_state = status[\"gcode_state\"]\n            if \"gcode_file\" in status: self._gcode_file = status[\"gcode_file\"]\n            if \"print_type\" in status: self._print_type = status[\"print_type\"]\n            if \"mc_percent\" in status: self._percent_complete = status[\"mc_percent\"]\n            if \"mc_remaining_time\" in status: self._time_remaining = status[\"mc_remaining_time\"]\n            if \"total_layer_num\" in status: self._layer_count = status[\"total_layer_num\"]\n            if \"layer_num\" in status: self._current_layer = status[\"layer_num\"]\n\n            if \"stg_cur\" in status: \n                self._current_stage = int(status[\"stg_cur\"])\n                self._current_stage_text = parseStage(self._current_stage)\n\n            if \"command\" in status and status[\"command\"] == \"project_file\":\n                logger.debug(\"project_file request acknowledged\")\n\n            if \"ams\" in status and \"ams\" in status[\"ams\"]:\n                if status[\"ams\"][\"ams_exist_bits\"]:\n                    self._ams_exists = int(status[\"ams\"][\"ams_exist_bits\"]) == 1\n                    if self._ams_exists:\n                        spools = []\n                        ams = (status[\"ams\"][\"ams\"])[0]\n                        for tray in ams[\"tray\"]:\n                            try:\n                                tray_color = hex_to_name(\"#\" + tray[\"tray_color\"][:6])\n                            except:\n                                try:\n                                    tray_color = \"#\" + tray[\"tray_color\"]\n                                except:\n                                    tray_color = \"N/A\"\n\n                            spool = BambuSpool(int(tray[\"id\"]),  tray[\"tray_id_name\"] if \"tray_id_name\" in tray else \"\",  tray[\"tray_type\"] if \"tray_type\" in tray else \"\", tray[\"tray_sub_brands\"] if \"tray_sub_brands\" in tray else \"\", tray_color)\n                            spools.append(spool)\n                        self._spools = tuple(spools)\n                # else: \n                #     self._ams_exists = False\n\n            if \"vt_tray\" in status:\n                tray = status[\"vt_tray\"]\n                try:\n                    tray_color = hex_to_name(\"#\" + tray[\"tray_color\"][:6])\n                except:\n                    try:\n                        tray_color = \"#\" + tray[\"tray_color\"]\n                    except:\n                        tray_color = \"N/A\"\n\n                spool = BambuSpool(int(tray[\"id\"]), tray[\"tray_id_name\"],  tray[\"tray_type\"], tray[\"tray_sub_brands\"], tray_color)\n\n                if range(len(self.spools), 1, 2): \n                    spools = (spool,)\n                else:\n                    spools = list(self.spools)\n                    spools.append(spool)\n                self._spools = tuple(spools)\n\n            tray_tar = None\n            tray_now = None\n\n            if \"ams\" in status and \"tray_tar\" in status[\"ams\"]:\n                tray_tar = int(status[\"ams\"][\"tray_tar\"])\n                if tray_tar != 255: \n                    self._target_spool = int(tray_tar)\n\n            if \"ams\" in status and \"tray_now\" in status[\"ams\"]:\n                tray_now = int(status[\"ams\"][\"tray_now\"])\n                if tray_now != 255: \n                    if self.active_spool != tray_now: \n                        self._spool_state = f\"Loading\"\n                        self._active_spool = tray_now\n\n            if not tray_tar is None and tray_tar != tray_now: \n                self._spool_state = f\"Unloading\"\n                if not tray_now is None: self._active_spool = tray_now\n\n            if \"ams\" in status and \"tray_pre\" in status[\"ams\"]:\n                tray_pre = int(status[\"ams\"][\"tray_pre\"])\n                if self.spool_state == \"Unloading\":\n                    self._spool_state = \"Unloaded\"\n\n            if \"ams_status\" in status:\n                self._ams_status = int(status[\"ams_status\"])\n                if self._ams_status == 768:\n                    self._spool_state = \"Loaded\"\n\n        elif \"info\" in message and \"result\" in message[\"info\"] and message[\"info\"][\"result\"] == \"success\": \n            self._recent_update = True\n            info = message[\"info\"]\n            for module in info[\"module\"]:\n                if \"ota\" in module[\"name\"]: \n                    self.config.serial_number = module[\"sn\"]\n                    self.config.firmware_version = module[\"sw_ver\"]\n                if \"ams\" in module[\"name\"]:\n                    self.config.ams_firmware_version = module[\"sw_ver\"]\n        else:\n            logger.warn(\"unknown message type received\")\n\n        if self.on_update: self.on_update(self)\n\n    @property \n    def config(self):\n        return self._config\n    @config.setter \n    def config(self, value: BambuConfig):\n        self._config = value\n\n    @property \n    def state(self):\n        return self._state\n    @state.setter \n    def state(self, value: PrinterState):\n        self._state = value\n\n    @property \n    def client(self):\n        return self._client\n    @client.setter \n    def client(self, value: mqtt.Client):\n        self._client = value\n\n    @property \n    def on_update(self):\n        return self._on_update\n    @on_update.setter \n    def on_update(self, value):\n        self._on_update = value\n\n    @property \n    def recent_update(self):\n        return self._recent_update\n\n    @property \n    def bed_temp(self):\n        return self._bed_temp\n\n    @property \n    def bed_temp_target(self):\n        return self._bed_temp_target\n    @bed_temp_target.setter \n    def bed_temp_target(self, value: float):\n        value = float(value)\n        if value &lt; 0.0: value = 0.0\n        gcode = SEND_GCODE_TEMPLATE\n        gcode[\"print\"][\"param\"] = f\"M140 S{value}\\n\"\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(gcode))\n\n    @property \n    def tool_temp(self):\n        return self._tool_temp\n\n    @property \n    def tool_temp_target(self):\n        return self._tool_temp_target\n    @tool_temp_target.setter \n    def tool_temp_target(self, value: float):\n        value = float(value)\n        if value &lt; 0.0: value = 0.0\n        gcode = SEND_GCODE_TEMPLATE\n        gcode[\"print\"][\"param\"] = f\"M104 S{value}\\n\"\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(gcode))\n\n    @property \n    def chamber_temp(self):\n        return self._chamber_temp\n\n    @property \n    def chamber_temp_target(self):\n        return self._chamber_temp_target\n    @chamber_temp.setter \n    def chamber_temp_target(self, value: float):\n        self._chamber_temp_target = value\n\n    @property \n    def fan_speed(self):\n        return self._fan_speed\n\n    @property \n    def fan_speed_target(self):\n        return self._fan_speed_target\n    @fan_speed_target.setter \n    def fan_speed_target(self, value: int):\n        value = int(value)\n        if value &lt; 0: value = 0\n        self._fan_speed_target = value\n        speed = round(value * 2.55, 0)\n        gcode = SEND_GCODE_TEMPLATE\n        gcode[\"print\"][\"param\"] = f\"M106 P1 S{speed}\\nM106 P2 S{speed}\\nM106 P3 S{speed}\\n\"\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(gcode))\n\n    @property \n    def fan_gear(self):\n        return self._fan_gear\n\n    @property \n    def heatbreak_fan_speed(self):\n        return self._heatbreak_fan_speed\n\n    @property \n    def wifi_signal(self):\n        return self._wifi_signal\n\n    @property \n    def light_state(self):\n        return self._light_state == \"on\"\n    @light_state.setter \n    def light_state(self, value: bool):\n        value = bool(value)\n        cmd = CHAMBER_LIGHT_TOGGLE\n        if value:\n            cmd[\"system\"][\"led_mode\"] = \"on\"\n        else:\n            cmd[\"system\"][\"led_mode\"] = \"off\"\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(cmd))\n\n    @property \n    def speed_level(self):\n        return self._speed_level\n    @speed_level.setter \n    def speed_level(self, value: str):\n        value = str(value)\n        cmd = SPEED_PROFILE_TEMPLATE\n        cmd[\"print\"][\"param\"] = value\n        self.client.publish(f\"device/{self.config.serial_number}/request\", json.dumps(cmd))\n\n    @property \n    def gcode_state(self):\n        return self._gcode_state\n\n    @property \n    def gcode_file(self):\n        return self._gcode_file\n    @gcode_file.setter \n    def gcode_file(self, value):\n        self._gcode_file = value\n\n    @property \n    def print_type(self):\n        return self._print_type\n\n    @property \n    def percent_complete(self):\n        return self._percent_complete\n\n    @property \n    def time_remaining(self):\n        return self._time_remaining\n\n    @property \n    def layer_count(self):\n        return self._layer_count\n\n    @property \n    def current_layer(self):\n        return self._current_layer\n\n    @property \n    def current_stage(self):\n        return self._current_stage\n\n    @property \n    def current_stage_text(self):\n        return parseStage(self._current_stage)\n\n    @property \n    def spools(self):\n        return self._spools\n\n    @property \n    def target_spool(self):\n        return self._target_spool\n\n    @property \n    def active_spool(self):\n        return self._active_spool\n\n    @property \n    def spool_state(self):\n        return self._spool_state\n\n    @property \n    def ams_status(self):\n        return self._ams_status\n\n    @property \n    def ams_exists(self):\n        return self._ams_exists\n\n    @property \n    def internalException(self):\n        return self._internalException\n\n    @property\n    def cached_sd_card_contents(self):\n        return self._sdcard_contents\n\n    @property\n    def cached_sd_card_3mf_files(self):\n        return self._sdcard_3mf_files\n</code></pre>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__","title":"<code>__init__(config=BambuConfig())</code>","text":"<p>Sets up all internal storage variables for <code>BambuPrinter</code> and bootstraps the logging engine.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__--parameters","title":"Parameters","text":"<p>config : BambuConfig</p> <p>The private variables (where appropriate) are included whenever the class is serialized using its <code>toJson()</code> method.</p> Source code in <code>bpm/bambuprinter.py</code> Python<pre><code>def __init__(self, config=BambuConfig()):\n    \"\"\"\n    Sets up all internal storage variables for `BambuPrinter` and bootstraps the\n    logging engine.\n\n    Parameters\n    ----------\n    config : BambuConfig\n\n    The private variables (where appropriate) are included whenever the class is serialized\n    using its `toJson()` method.\n    \"\"\"\n    setup_logging()\n\n    self._internalException = None\n    self._lastMessageTime = None\n    self._recent_update = False\n\n    self._config = config\n    self._state = PrinterState.NO_STATE\n\n    self._client = None\n    self._on_update = None\n\n    self._bed_temp = 0.0\n    self._bed_temp_target = 0.0\n    self._tool_temp = 0.0\n    self._tool_temp_target = 0.0\n    self._chamber_temp = 0.0\n    self._chamber_temp_target = 0.0\n\n    self._fan_gear = 0\n    self._heatbreak_fan_speed = 0\n    self._fan_speed = 0\n    self._fan_speed_target = 0\n\n    self._light_state = \"\"\n    self._wifi_signal = \"\"\n    self._speed_level = 0\n\n    self._gcode_state = \"\"\n    self._gcode_file = \"\"\n    self._print_type = \"\"\n    self._percent_complete = 0\n    self._time_remaining = 0\n    self._layer_count = 0\n    self._current_layer = 0\n\n    self._current_stage = 0\n    self._current_stage_text = \"\"\n\n    self._spools = ()\n    self._target_spool = 255\n    self._active_spool = 255\n    self._spool_state = \"\"\n    self._ams_status = None\n    self._ams_exists = False\n\n    self._sdcard_contents = None\n    self._sdcard_3mf_files = None\n</code></pre>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.pause_session","title":"<code>pause_session()</code>","text":"<p>Pauses the <code>BambuPrinter</code> session is it is active.  Under the covers this method unsubscribes from the <code>/report</code> topic, essentially disabling all printer data refreshes</p> Source code in <code>bpm/bambuprinter.py</code> Python<pre><code>def pause_session(self):\n    \"\"\"\n    Pauses the `BambuPrinter` session is it is active.  Under the covers this\n    method unsubscribes from the `/report` topic, essentially disabling all\n    printer data refreshes\n    \"\"\"\n    if self.state != PrinterState.PAUSED:\n        self.client.unsubscribe(f\"device/{self.config.serial_number}/report\")\n        logger.debug(f\"unsubscribed from [device/{self.config.serial_number}/report]\")\n        self.state = PrinterState.PAUSED\n</code></pre>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.start_session","title":"<code>start_session()</code>","text":"<p>Initiates a connection to the Bambu Lab printer and provides a stateful session, with built-in recovery in the event <code>bambu-printer-manager</code>  becomes disconnected from the machine.</p> <p>This method is required to be called before any commands or data  collection / callbacks can take place with the machine.</p> Source code in <code>bpm/bambuprinter.py</code> Python<pre><code>def start_session(self):\n    \"\"\"\n    Initiates a connection to the Bambu Lab printer and provides a stateful\n    session, with built-in recovery in the event `bambu-printer-manager` \n    becomes disconnected from the machine.\n\n    This method is required to be called before any commands or data \n    collection / callbacks can take place with the machine.\n    \"\"\"\n    logger.debug(\"session start_session\")\n    if self.config.hostname is None or self.config.access_code is None or self.config.serial_number is None:\n        raise Exception(\"hostname, access_code, and serial_number are required\")\n    if self.client and self.client.is_connected():\n        raise Exception(\"a session is already active\")\n\n    def on_connect(client, userdata, flags, rc):\n        logger.debug(\"session on_connect\")\n        if self.state != PrinterState.PAUSED:\n            self.state = PrinterState.CONNECTED\n            client.subscribe(f\"device/{self.config.serial_number}/report\")\n            logger.debug(f\"subscribed to [device/{self.config.serial_number}/report]\")\n    def on_disconnect(client, userdata, rc):\n        logger.debug(\"session on_disconnect\")\n        if self._internalException:\n            logger.exception(\"an internal exception occurred\")\n            self.state = PrinterState.QUIT\n            raise self._internalException\n        if self.state != PrinterState.PAUSED:\n            self.state = PrinterState.DISCONNECTED\n    def on_message(client, userdata, msg):\n        logger.debug(\"session on_message\", extra={\"state\": self.state.name})\n        if self._lastMessageTime and self._recent_update: self._lastMessageTime = time.time()\n        self._on_message(json.loads(msg.payload.decode(\"utf-8\")))\n    def loop_forever(printer):\n        logger.debug(\"session loop_forever\")\n        try:\n            printer.client.loop_forever(retry_first_connection=True)            \n        except Exception as e:\n            logger.exception(\"an internal exception occurred\")\n            printer._internalException = e\n            if printer.client and printer.client.is_connected(): printer.client.disconnect() \n        printer.state = PrinterState.QUIT\n\n    self.client = mqtt.Client()\n\n    self.client.on_connect = on_connect\n    self.client.on_disconnect = on_disconnect\n    self.client.on_message = on_message\n\n    self.client.tls_set(tls_version=ssl.PROTOCOL_TLS, cert_reqs=ssl.CERT_NONE)\n    self.client.tls_insecure_set(True)\n    self.client.reconnect_delay_set(min_delay=1, max_delay=1)\n\n    self.client.username_pw_set(self.config.mqtt_username, password=self.config.access_code)\n    self.client.user_data_set(self.config.mqtt_client_id)\n\n    try:\n        self.client.connect(self.config.hostname, self.config.mqtt_port, 60)\n    except Exception as e:\n        self._internalException = e\n        logger.warning(f\"unable to connect to printer - reason: {e}\", extra={\"exception\": traceback.format_exc()})\n        self.state = PrinterState.QUIT\n        return\n\n    threading.Thread(target=loop_forever, name=\"bambuprinter-session\", args=(self,)).start()\n\n    self._start_watchdog()\n</code></pre>"},{"location":"reference/bpm/bambuspool/","title":"bambuspool","text":""},{"location":"reference/bpm/bambutools/","title":"bambutools","text":""},{"location":"reference/bpm/ftpsclient/__init__/","title":"ftpsclient","text":""},{"location":"reference/bpm/ftpsclient/_client/","title":"_client","text":"<p>wrapper for FTPS server interactions</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.ImplicitTLS","title":"<code>ImplicitTLS</code>","text":"<p>             Bases: <code>FTP_TLS</code></p> <p>ftplib.FTP_TLS sub-class to support implicit SSL FTPS</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>class ImplicitTLS(ftplib.FTP_TLS):\n    \"\"\"ftplib.FTP_TLS sub-class to support implicit SSL FTPS\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._sock = None\n\n    @property\n    def sock(self):\n        \"\"\"return socket\"\"\"\n        return self._sock\n\n    @sock.setter\n    def sock(self, value):\n        \"\"\"wrap and set SSL socket\"\"\"\n        if value is not None and not isinstance(value, ssl.SSLSocket):\n            value = self.context.wrap_socket(value)\n        self._sock = value\n\n    def ntransfercmd(self, cmd, rest=None):\n        conn, size = ftplib.FTP.ntransfercmd(self, cmd, rest)\n        if self._prot_p:\n            conn = self.context.wrap_socket(conn,\n                                            server_hostname=self.host,\n                                            session=self.sock.session)  # this is the fix\n        return conn, size\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.ImplicitTLS.sock","title":"<code>sock</code>  <code>property</code> <code>writable</code>","text":"<p>return socket</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient","title":"<code>IoTFTPSClient</code>","text":"<p>iot ftps ftpsclient</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>class IoTFTPSClient:\n    \"\"\"iot ftps ftpsclient\"\"\"\n\n    ftps_host: str\n    ftps_port: int\n    ftps_user: str\n    ftps_pass: str\n    ssl_implicit: bool\n    ftps_session: Union[ftplib.FTP, ImplicitTLS]\n\n    def __init__(\n        self,\n        ftps_host: str,\n        ftps_port: Optional[int] = 21,\n        ftps_user: Optional[str] = \"\",\n        ftps_pass: Optional[str] = \"\",\n        ssl_implicit: Optional[bool] = False,\n    ) -&gt; None:\n        self.ftps_host = ftps_host\n        self.ftps_port = ftps_port\n        self.ftps_user = ftps_user\n        self.ftps_pass = ftps_pass\n        self.ssl_implicit = ssl_implicit\n        self.instantiate_ftps_session()\n\n    def __repr__(self) -&gt; str:\n        return (\n            \"IoT FTPS Client\\n\"\n            \"--------------------\\n\"\n            f\"host: {self.ftps_host}\\n\"\n            f\"port: {self.ftps_port}\\n\"\n            f\"user: {self.ftps_user}\\n\"\n            f\"ssl: {self.ssl_implicit}\"\n        )\n\n    def instantiate_ftps_session(self) -&gt; None:\n        \"\"\"init ftps_session based on input params\"\"\"\n        try:\n            if self.ssl_implicit:\n                self.ftps_session = ImplicitTLS()\n            else:\n                self.ftps_session = ftplib.FTP()\n\n            self.ftps_session.connect(host=self.ftps_host, port=self.ftps_port)\n\n            if self.ftps_user != \"\" and self.ftps_pass != \"\":\n                self.ftps_session.login(user=self.ftps_user, passwd=self.ftps_pass)\n            else:\n                self.ftps_session.login()\n\n            if self.ssl_implicit:\n                self.ftps_session.prot_p()\n\n        except Exception as ex:\n            print(f\"unexpected exception occurred: {ex}\")\n            pass\n        return\n\n    def disconnect(self) -&gt; None:\n        \"\"\"disconnect the current session from the ftps server\"\"\"\n        try:\n            self.ftps_session.close()\n        except Exception as ex:\n            print(f\"unexpected exception occurred: {ex}\")\n            pass\n        return\n\n    def download_file(self, source: str, dest: str) -&gt; bool:\n        \"\"\"download a file to a path on the local filesystem\"\"\"\n        try:\n            with open(dest, \"wb\") as file:\n                self.ftps_session.retrbinary(f\"RETR {source}\", file.write)\n            return True\n        except Exception as ex:\n            print(f\"unexpected exception occurred: {ex}\")\n            pass\n        return False\n\n    def upload_file(self, source: str, dest: str) -&gt; bool:\n        \"\"\"upload a file to a path inside the FTPS server\"\"\"\n        try:\n            with open(source, \"rb\") as file:\n                self.ftps_session.storbinary(f\"STOR {dest}\", file)\n            return True\n        except Exception as ex:\n            print(f\"unexpected exception occurred: {ex}\")\n            pass\n        return False\n\n    def delete_file(self, path: str) -&gt; bool:\n        \"\"\"delete a file from under a path inside the FTPS server\"\"\"\n        try:\n            self.ftps_session.delete(path)\n            return True\n        except Exception as ex:\n            print(f\"unexpected exception occurred: {ex}\")\n            pass\n        return False\n\n    def move_file(self, source: str, dest: str) -&gt; bool:\n        \"\"\"move a file inside the FTPS server to another path inside the FTPS server\"\"\"\n        try:\n            self.ftps_session.rename(source, dest)\n            return True\n        except Exception as ex:\n            print(f\"unexpected exception occurred: {ex}\")\n            pass\n        return False\n\n    def list_files(\n        self, path: str, file_pattern: Optional[str] = None\n    ) -&gt; Union[List[str], None]:\n        \"\"\"list files under a path inside the FTPS server\"\"\"\n        try:\n            files = self.ftps_session.nlst(path)\n            if not files:\n                return\n            if file_pattern:\n                return [f for f in files if file_pattern in f]\n            return files\n        except Exception as ex:\n            print(f\"unexpected exception occurred: [{ex}]\")\n            pass\n        return\n\n    def list_files_ex(self, path: str) -&gt; Union[List[str], None]:\n        \"\"\"list files under a path inside the FTPS server\"\"\"\n        try:\n            f = io.StringIO()\n            with redirect_stdout(f):\n                self.ftps_session.dir(path)\n            s = f.getvalue()\n            files = []\n            for row in s.split(\"\\n\"):\n                if len(row) &lt;= 0: continue\n\n                attribs = row.split(\" \")\n                file = ( attribs[0], attribs[len(attribs) - 1] )\n                files.append(file)\n            return files\n        except Exception as ex:\n            print(f\"unexpected exception occurred: [{ex}]\")\n            pass\n        return    \n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.delete_file","title":"<code>delete_file(path)</code>","text":"<p>delete a file from under a path inside the FTPS server</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def delete_file(self, path: str) -&gt; bool:\n    \"\"\"delete a file from under a path inside the FTPS server\"\"\"\n    try:\n        self.ftps_session.delete(path)\n        return True\n    except Exception as ex:\n        print(f\"unexpected exception occurred: {ex}\")\n        pass\n    return False\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.disconnect","title":"<code>disconnect()</code>","text":"<p>disconnect the current session from the ftps server</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def disconnect(self) -&gt; None:\n    \"\"\"disconnect the current session from the ftps server\"\"\"\n    try:\n        self.ftps_session.close()\n    except Exception as ex:\n        print(f\"unexpected exception occurred: {ex}\")\n        pass\n    return\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.download_file","title":"<code>download_file(source, dest)</code>","text":"<p>download a file to a path on the local filesystem</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def download_file(self, source: str, dest: str) -&gt; bool:\n    \"\"\"download a file to a path on the local filesystem\"\"\"\n    try:\n        with open(dest, \"wb\") as file:\n            self.ftps_session.retrbinary(f\"RETR {source}\", file.write)\n        return True\n    except Exception as ex:\n        print(f\"unexpected exception occurred: {ex}\")\n        pass\n    return False\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.instantiate_ftps_session","title":"<code>instantiate_ftps_session()</code>","text":"<p>init ftps_session based on input params</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def instantiate_ftps_session(self) -&gt; None:\n    \"\"\"init ftps_session based on input params\"\"\"\n    try:\n        if self.ssl_implicit:\n            self.ftps_session = ImplicitTLS()\n        else:\n            self.ftps_session = ftplib.FTP()\n\n        self.ftps_session.connect(host=self.ftps_host, port=self.ftps_port)\n\n        if self.ftps_user != \"\" and self.ftps_pass != \"\":\n            self.ftps_session.login(user=self.ftps_user, passwd=self.ftps_pass)\n        else:\n            self.ftps_session.login()\n\n        if self.ssl_implicit:\n            self.ftps_session.prot_p()\n\n    except Exception as ex:\n        print(f\"unexpected exception occurred: {ex}\")\n        pass\n    return\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.list_files","title":"<code>list_files(path, file_pattern=None)</code>","text":"<p>list files under a path inside the FTPS server</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def list_files(\n    self, path: str, file_pattern: Optional[str] = None\n) -&gt; Union[List[str], None]:\n    \"\"\"list files under a path inside the FTPS server\"\"\"\n    try:\n        files = self.ftps_session.nlst(path)\n        if not files:\n            return\n        if file_pattern:\n            return [f for f in files if file_pattern in f]\n        return files\n    except Exception as ex:\n        print(f\"unexpected exception occurred: [{ex}]\")\n        pass\n    return\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.list_files_ex","title":"<code>list_files_ex(path)</code>","text":"<p>list files under a path inside the FTPS server</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def list_files_ex(self, path: str) -&gt; Union[List[str], None]:\n    \"\"\"list files under a path inside the FTPS server\"\"\"\n    try:\n        f = io.StringIO()\n        with redirect_stdout(f):\n            self.ftps_session.dir(path)\n        s = f.getvalue()\n        files = []\n        for row in s.split(\"\\n\"):\n            if len(row) &lt;= 0: continue\n\n            attribs = row.split(\" \")\n            file = ( attribs[0], attribs[len(attribs) - 1] )\n            files.append(file)\n        return files\n    except Exception as ex:\n        print(f\"unexpected exception occurred: [{ex}]\")\n        pass\n    return    \n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.move_file","title":"<code>move_file(source, dest)</code>","text":"<p>move a file inside the FTPS server to another path inside the FTPS server</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def move_file(self, source: str, dest: str) -&gt; bool:\n    \"\"\"move a file inside the FTPS server to another path inside the FTPS server\"\"\"\n    try:\n        self.ftps_session.rename(source, dest)\n        return True\n    except Exception as ex:\n        print(f\"unexpected exception occurred: {ex}\")\n        pass\n    return False\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.upload_file","title":"<code>upload_file(source, dest)</code>","text":"<p>upload a file to a path inside the FTPS server</p> Source code in <code>bpm/ftpsclient/_client.py</code> Python<pre><code>def upload_file(self, source: str, dest: str) -&gt; bool:\n    \"\"\"upload a file to a path inside the FTPS server\"\"\"\n    try:\n        with open(source, \"rb\") as file:\n            self.ftps_session.storbinary(f\"STOR {dest}\", file)\n        return True\n    except Exception as ex:\n        print(f\"unexpected exception occurred: {ex}\")\n        pass\n    return False\n</code></pre>"},{"location":"reference/bpm/ftpsclient/_version/","title":"_version","text":""}]}