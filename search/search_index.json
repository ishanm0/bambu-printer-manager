{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#bambu-printer-manager","title":"bambu-printer-manager","text":"<p><code>bambu-printer-manager</code> is an all in one pure python wrapper for interacting with and managing Bambu Labs printers.  </p>"},{"location":"#project-composition","title":"Project Composition","text":"Text Only<pre><code>bpm/  \n    bambucommands.py            # collection of constants representing Bambu Lab `mqtt` request commands \n    bambuconfig.py              # contains the `BambuConfig` class used for storing configuration data\n    bambulogger.py              # internal class used for logging\n    bambuprinterlogger.json     # internal configuration file for configuration of logging\n    bambuprinter.py             # the main `bambu-printer-manager` class `BambuPrinter` lives here\n    bambuspool.py               # contains the `BambuSpool` class used for storing spool data\n    bambutools.py               # contains a collection of methods used as tools (mostly internal)\n\n    ftpsclient/\n        _client.py              # internal class used for performing `FTPS` operations\n</code></pre>"},{"location":"#dependencies","title":"Dependencies","text":"Text Only<pre><code>Python 3.12.1+\n\n* mkdocstrings, webcolors and paho-mqtt install automatically as predefined dependencies\n</code></pre>"},{"location":"#installation","title":"Installation","text":"Text Only<pre><code>pip install bambu-printer-manager\n</code></pre>"},{"location":"#imports","title":"Imports","text":"Python<pre><code>from bpm.bambuconfig import BambuConfig\nfrom bpm.bambuprinter import BambuPrinter\nfrom bpm.bambutools import PrinterState\nfrom bpm.bambutools import parseStage\nfrom bpm.bambutools import parseFan\n</code></pre>"},{"location":"#constructors","title":"Constructor(s)","text":"<p>Python<pre><code>config = BambuConfig(hostname=\"{host name}\", access_code=\"{access code}\", serial_number=\"{serial #}\")\nprinter = BambuPrinter(config=config)\n</code></pre> or variations such as: Python<pre><code>config = BambuConfig()\nprinter = BambuPrinter()\n\nconfig.hostname = \"{host name}\"\nconfig.access_code = \"{access code}\"\nconfig.serial_number = \"{serial #}\"\n\nprinter.config = config\n</code></pre> or Python<pre><code>config = BambuConfig()\n\nconfig.hostname = \"{host name}\"\nconfig.access_code = \"{access code}\"\nconfig.serial_number = \"{serial #}\"\n\nprinter = BambuPrinter(config=config)\n</code></pre> or even Python<pre><code>printer = BambuPrinter(config=BambuConfig(hostname=\"{host name}\", access_code=\"{access code}\", serial_number=\"{serial #}\"))\n</code></pre></p>"},{"location":"license/","title":"License","text":"Text Only<pre><code>            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar &lt;sam@hocevar.net&gt;\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>bpm<ul> <li>bambucommands</li> <li>bambuconfig</li> <li>bambulogger</li> <li>bambuprinter</li> <li>bambuspool</li> <li>bambutools</li> <li>ftpsclient<ul> <li>_client</li> <li>_version</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/bpm/bambucommands/","title":"bambucommands","text":"<p><code>bambucommands</code> contains all the internal command structures that are used by <code>BambuPrinter</code> to interact  with your printer.</p>"},{"location":"reference/bpm/bambuconfig/","title":"bambuconfig","text":""},{"location":"reference/bpm/bambulogger/","title":"bambulogger","text":""},{"location":"reference/bpm/bambuprinter/","title":"bambuprinter","text":""},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter","title":"<code>BambuPrinter</code>","text":"<p><code>BambuPrinter</code> is the main class within <code>bambu-printer-manager</code> for interacting with and managing your Bambu Lab 3d printer. It provides an object oriented abstraction layer  between your project and the <code>mqtt</code> and <code>ftps</code> based mechanisms in place for communicating with your printer.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__","title":"<code>__init__(config=BambuConfig())</code>","text":"<p>Sets up all internal storage attributes for <code>BambuPrinter</code> and bootstraps the logging engine.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__--parameters","title":"Parameters","text":"<ul> <li>config : BambuConfig</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.__init__--attributes","title":"Attributes","text":"<ul> <li>_internalExcepton: <code>READ ONLY</code> Returns the underlying <code>Exception</code> object if a failure occurred.</li> <li>_lastMessageTime: <code>READ ONLY</code> epoch timestamp (in seconds) for the last time an update was received from the printer.</li> <li>_recent_update: <code>READ ONLY</code> indicates that a message from the printer has been recently processed</li> <li>_config: <code>READ/WRITE</code> <code>bambuconfig.BambuConfig</code> Configuration object associated with this instance</li> </ul> <p>The attributes (where appropriate) are included whenever the class is serialized using its <code>toJson()</code> method.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_3mf_files","title":"<code>get_sdcard_3mf_files()</code>","text":"<p>Returns a <code>dict</code> (json document) of all <code>.gcode.3mf</code> files on the printer's SD card.  The private class level <code>_sdcard_3mf_files</code> attribute is also populated.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_3mf_files--usage","title":"Usage","text":"<p>The return value of this method is very useful for binding to things like a clientside <code>TreeView</code></p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_contents","title":"<code>get_sdcard_contents()</code>","text":"<p>Returns a <code>dict</code> (json document) of ALL files on the printer's SD card.  The private class level <code>_sdcard_contents</code> attribute is also populated.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.get_sdcard_contents--usage","title":"Usage","text":"<p>The return value of this method is very useful for binding to things like a clientside <code>TreeView</code></p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.jsonSerializer","title":"<code>jsonSerializer(obj)</code>","text":"<p>Helper method used by <code>toJson()</code> to serialize this object.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.load_filament","title":"<code>load_filament(slot)</code>","text":"<p>Requests the printer to load filament into the extruder using the requested spool (slot #)</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.load_filament--parameters","title":"Parameters","text":"<p>slot : int</p> <ul> <li><code>0</code> - AMS Spool #1</li> <li><code>1</code> - AMS Spool #2</li> <li><code>2</code> - AMS Spool #3</li> <li><code>3</code> - AMS Spool #4</li> <li><code>254</code> - External Spool</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.pause_printing","title":"<code>pause_printing()</code>","text":"<p>Pauses the current print job if one is running.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.pause_session","title":"<code>pause_session()</code>","text":"<p>Pauses the <code>BambuPrinter</code> session is it is active.  Under the covers this method unsubscribes from the <code>/report</code> topic, essentially disabling all printer data refreshes.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file","title":"<code>print_3mf_file(name, bed, ams, bedlevel=True, flow=True, timelapse=False)</code>","text":"<p>Submits a request to execute the <code>name</code>.gcode.3mf file on the printer's SDCard. </p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file--parameters","title":"Parameters","text":"<ul> <li>name : str                         - path and filename to execute minus the <code>.gcode.3mf</code> extension</li> <li>bed : PlateType                    - the bambutools.PlateType to use</li> <li>ams : str                          - an <code>AMS Mapping</code> that specifies which AMS spools to use (external spool is used if blank)</li> <li>bedlevel :  Optional[bool] = True  - boolean value indicates whether or not the printer should auto-level the bed</li> <li>flow :      Optional[bool] = True  - boolean value indicates if the printer should perform an extrusion flow calibration</li> <li>timelapse : Optional[bool] = False - boolean value indicates if printer should take timelapse photos during the job</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file--example","title":"Example","text":"<ul> <li><code>print_3mf_file(\"/jobs/my_project\", \"\")</code> - Print the my_project.gcode.3mf file in the SDCard /jobs directory using the external spool with bed leveling and extrusion flow calibration enabled and timelapse disabled</li> <li><code>print_3mf_file(\"/jobs/my_project\", \"[-1,-1,2,-1]\")</code> - Same as above but use AMS spool #3</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.print_3mf_file--ams-mapping","title":"AMS Mapping","text":"<ul> <li><code>[0,-1,-1,-1]</code> - use AMS spool #1 only</li> <li><code>[-1,1,-1,-1]</code> - use AMS spool #2 only</li> <li><code>[0,-1,-1,3]</code>  - use AMS spools #1 and #4</li> <li><code>[0,1,2,3]</code>    - use all 4 AMS spools</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.quit","title":"<code>quit()</code>","text":"<p>Shuts down all threads.  Your <code>BambuPrinter</code> instance should probably be  considered dead after making this call although you may be able to restart a session with start_session().</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.refresh","title":"<code>refresh()</code>","text":"<p>Triggers a full data refresh from the printer (if it is connected).  You should use this method sparingly as resorting to it indicates something is not working properly.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.resume_printing","title":"<code>resume_printing()</code>","text":"<p>Resumes the current print job if one is paused.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.resume_session","title":"<code>resume_session()</code>","text":"<p>Resumes a previously paused session by re-subscribing to the /report topic.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.send_gcode","title":"<code>send_gcode(gcode)</code>","text":"<p>Submit one, or more, gcode commands to the printer.  To submit multiple gcode commands, separate them with a newline (\\n) character.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.send_gcode--parameters","title":"Parameters","text":"<p>gcode : str</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.send_gcode--examples","title":"Examples","text":"<ul> <li><code>send_gcode(\"G91\\nG0 X0\\nG0 X50\")</code> - queues 3 gcode commands on the printer for processing</li> <li><code>send_gcode(\"G28\")</code> - queues 1 gcode command on the printer for processing</li> </ul>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.start_session","title":"<code>start_session()</code>","text":"<p>Initiates a connection to the Bambu Lab printer and provides a stateful session, with built-in recovery in the event <code>BambuPrinter</code>  becomes disconnected from the machine.</p> <p>This method is required to be called before any commands or data  collection / callbacks can take place with the machine.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.stop_printing","title":"<code>stop_printing()</code>","text":"<p>Requests the printer to stop printing if a job is currently running.</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.toJson","title":"<code>toJson()</code>","text":"<p>Returns a <code>dict</code> (json document) representing this object's private class level attributes that are serializable (most are).</p>"},{"location":"reference/bpm/bambuprinter/#bpm.bambuprinter.BambuPrinter.unload_filament","title":"<code>unload_filament()</code>","text":"<p>Requests the printer to unload whatever filament / spool may be currently loaded.</p>"},{"location":"reference/bpm/bambuspool/","title":"bambuspool","text":""},{"location":"reference/bpm/bambutools/","title":"bambutools","text":""},{"location":"reference/bpm/ftpsclient/__init__/","title":"ftpsclient","text":""},{"location":"reference/bpm/ftpsclient/_client/","title":"_client","text":"<p>wrapper for FTPS server interactions</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.ImplicitTLS","title":"<code>ImplicitTLS</code>","text":"<p>             Bases: <code>FTP_TLS</code></p> <p>ftplib.FTP_TLS sub-class to support implicit SSL FTPS</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.ImplicitTLS.sock","title":"<code>sock</code>  <code>property</code> <code>writable</code>","text":"<p>return socket</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient","title":"<code>IoTFTPSClient</code>","text":"<p>iot ftps ftpsclient</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.delete_file","title":"<code>delete_file(path)</code>","text":"<p>delete a file from under a path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.disconnect","title":"<code>disconnect()</code>","text":"<p>disconnect the current session from the ftps server</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.download_file","title":"<code>download_file(source, dest)</code>","text":"<p>download a file to a path on the local filesystem</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.instantiate_ftps_session","title":"<code>instantiate_ftps_session()</code>","text":"<p>init ftps_session based on input params</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.list_files","title":"<code>list_files(path, file_pattern=None)</code>","text":"<p>list files under a path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.list_files_ex","title":"<code>list_files_ex(path)</code>","text":"<p>list files under a path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.move_file","title":"<code>move_file(source, dest)</code>","text":"<p>move a file inside the FTPS server to another path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/_client/#bpm.ftpsclient._client.IoTFTPSClient.upload_file","title":"<code>upload_file(source, dest)</code>","text":"<p>upload a file to a path inside the FTPS server</p>"},{"location":"reference/bpm/ftpsclient/_version/","title":"_version","text":""}]}